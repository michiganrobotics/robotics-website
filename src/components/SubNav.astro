---
import { subNavConfig } from '../lib/nav';
import { Icon } from 'astro-icon/components';
// NewsSearch import and usage removed

const BASE = process.env.GITHUB_ACTIONS === 'true' ? '/rob-astro-23' : '';
const pathname = new URL(Astro.request.url).pathname;
const trimmedPath = pathname
  .replace(new RegExp(`^${BASE}`), '') // Remove base path only from start
  .slice(1)
  .replace(/\/$/, ''); // Remove leading and trailing slashes

// Helper function to add base to URI
const addBase = (uri: string, external?: boolean) => {
  if (external) return uri;
  // Remove any existing base paths
  const cleanUri = uri.replace(new RegExp(`^${BASE}`), '');
  return BASE + (cleanUri.startsWith('/') ? cleanUri : '/' + cleanUri);
};

// Process configured nav items to add base path
Object.entries(subNavConfig).forEach(([key, items]) => {
  subNavConfig[key] = items.map(item => ({
    ...item,
    href: addBase(item.href, item.external)
  }));
});

// Try exact matches with $ suffix first, then regex patterns, then regular paths, then first segment
const configuredItems = Object.entries(subNavConfig)
  .find(([key]) => {
    if (key.endsWith('$') && key.slice(0, -1) === trimmedPath) {
      return true;
    }
    if (key.startsWith('^')) {
      const pattern = new RegExp(key);
      return pattern.test(trimmedPath);
    }
    return key === trimmedPath;
  })?.[1] || 
  subNavConfig[trimmedPath.split('/')[0]] || 
  [];

const isNewsPage = trimmedPath === 'news';

// Separate anchor and non-anchor items
const navItems = configuredItems.filter(item => !item.anchor);
const anchorItems = configuredItems.filter(item => item.anchor);
---

{navItems.length > 0 && (
  <nav class="flex flex-wrap justify-end gap-1.5 sm:gap-2 mt-0 relative z-10 
              transition-opacity duration-200">
    {navItems.map((item, idx) => (
      <a 
        href={item.href}
        class={`px-2 py-1 sm:px-3 sm:py-1.5 md:px-4 md:py-2 rounded-sm 
                text-xs sm:text-sm md:text-sm 
                bg-white/90 dark:bg-umichblue/80
                hover:bg-white/80 dark:hover:bg-[var(--bg-surface-hover-dark)]
                text-umichblue dark:text-neutral-100
                transition-opacity duration-200
                border border-umichblue/30 dark:border-arboretumBlue/70
                hover:border-umichblue/50 dark:hover:border-arboretumBlue/90
                backdrop-blur-sm
                ${pathname === item.href ? 'bg-arboretumBlue/20 dark:bg-[var(--bg-surface-hover-dark)] border-umichblue/50 dark:border-arboretumBlue/60' : ''}`}
      >
        {item.title}
        {!item.external && !item.anchor && <span class="ml-1">â€º</span>}
        {item.external && <Icon name="mdi:open-in-new" class="inline w-4 h-4 ml-1" />}
      </a>
    ))}
  </nav>
)}

{anchorItems.length > 0 && (
  <div class={`w-full flex justify-end text-xs sm:text-sm ${navItems.length === 0 ? 'mt-6' : 'mt-2'}`}>
    <div class="text-right">
      <span class="font-semibold text-umichblue dark:text-neutral-100 mr-2">Jump to:</span>
      {anchorItems.map((item, idx) => (
        <a 
          href={item.href}
          class="underline text-umichblue dark:text-neutral-100"
        >
          {item.title}{idx < anchorItems.length - 1 ? ', ' : ''}
        </a>
      ))}
    </div>
  </div>
)}
