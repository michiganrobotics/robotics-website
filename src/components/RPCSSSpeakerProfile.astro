---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import MaizeButton from './MaizeButton.astro';

interface Props {
  image: ImageMetadata;
  imageAlt: string;
  title?: string;
  subtitle: string; // date
  name: string;
  role: string;
  website?: string;
  isExpanded?: boolean;
}

const { image, imageAlt, title = '', subtitle, name, role, website, isExpanded = false } = Astro.props;
---

<div class="rpcss-speaker-profile my-6 border border-gray-200 dark:border-gray-700 rounded-md overflow-visible">
  <button 
    class="group w-full text-left card-base card-padded surface hover:bg-[var(--bg-elevated-light)] dark:hover:bg-[var(--bg-elevated-dark)] transition-colors cursor-pointer flex flex-wrap items-center focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-arboretumBlue dark:focus-visible:ring-maize focus-visible:ring-offset-2 dark:focus-visible:ring-offset-gray-900 relative z-10"
    aria-expanded={isExpanded}
    data-rpcss-speaker-button
  >
    <div class="flex items-center gap-4 w-full sm:w-2/5">
      <div class="w-16 h-16 shrink-0">
        <Image 
          src={image} 
          alt={imageAlt}
          width={256}
          height={256}
          class="rounded-full w-full h-full object-cover not-prose"
        />
      </div>
      <div class="min-w-0">
        <p class="text-neutral-600 dark:text-neutral-200 text-sm">{subtitle}</p>
        <h3 class="text-xl font-bold dark:text-neutral-100 mt-0 mb-0 break-words">{name}</h3>
        <p class="italic mt-0 break-words">{role}</p>
      </div>
    </div>
    {title && (
      <div class="w-full sm:w-2/5 mt-0 sm:ml-8">
        <p class="text-xl font-bold text-neutral-800 dark:text-neutral-100 break-words group-hover:underline decoration-maize decoration-2">{title}</p>
      </div>
    )}
    <div class="shrink-0 ml-auto">
      <svg 
        class="chevron-icon w-6 h-6 text-arboretumBlue dark:text-maize"
        fill="none" 
        stroke="currentColor" 
        viewBox="0 0 24 24"
        data-expand-icon
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
      </svg>
    </div>
  </button>

  <div class={`content ${isExpanded ? '' : 'hidden'}`} data-content>
    <div class="p-6 undersurface rounded-lg">
      <div class="flex flex-col md:flex-row gap-8">
        <div class="md:w-1/4">
          {image && !image.src.toLowerCase().includes('robot-profile') && (
            <Image 
              src={image} 
              alt={imageAlt}
              width={400}
              height={400}
              class="hidden md:block rounded-lg w-full"
            />
          )}
          {website && (
            <MaizeButton 
              href={website}
              text="Visit website"
              target="_blank"
              rel="noopener noreferrer"
              class="mt-4 w-full"
            />
          )}
        </div>
        <div class="md:w-3/4">
          <div class="prose dark:prose-invert max-w-none">
            <slot />
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  function setupRPCSSSpeakerProfile() {
    console.log('🔧 Setting up RPCSS Speaker Profile...');
    const profiles = document.querySelectorAll('.rpcss-speaker-profile');
    console.log('🔍 Found profiles:', profiles.length);
    
    profiles.forEach((profile, index) => {
      console.log(`🔧 Setting up profile ${index}...`);
      const button = profile.querySelector('[data-rpcss-speaker-button]');
      const content = profile.querySelector('[data-content]');
      const expandIcon = profile.querySelector('[data-expand-icon]');
      
      console.log(`Profile ${index} elements:`, { button: !!button, content: !!content, expandIcon: !!expandIcon });
      
      if (button && content && expandIcon) {
        // Track state with a custom data attribute
        const initialState = button.getAttribute('aria-expanded') === 'true' ? 'expanded' : 'collapsed';
        profile.setAttribute('data-state', initialState);
        console.log(`Profile ${index} initial state:`, initialState);
        
        // Set initial state based on data-state
        if (initialState === 'expanded') {
          expandIcon.classList.add('rotated');
        } else {
          expandIcon.classList.remove('rotated');
        }
        
        // Enable transitions after initial state is set
        expandIcon.classList.add('transition-enabled');
        
        // Function to toggle expansion state
        const toggleExpansion = (e) => {
          console.log(`🔄 Toggle clicked on profile ${index}`);
          e.preventDefault();
          e.stopPropagation();
          
          // Get current state from our data attribute
          const currentState = profile.getAttribute('data-state');
          console.log(`Current state before toggle:`, currentState);
          
          // Toggle the state
          if (currentState === 'collapsed') {
            // Opening
            console.log(`📖 Opening profile ${index}`);
            profile.setAttribute('data-state', 'expanded');
            button.setAttribute('aria-expanded', 'true');
            content.classList.remove('hidden');
            expandIcon.classList.add('rotated');
          } else {
            // Closing
            console.log(`📕 Closing profile ${index}`);
            profile.setAttribute('data-state', 'collapsed');
            button.setAttribute('aria-expanded', 'false');
            content.classList.add('hidden');
            expandIcon.classList.remove('rotated');
          }
          
          // Check state after change
          setTimeout(() => {
            const newState = profile.getAttribute('data-state');
            const ariaExpanded = button.getAttribute('aria-expanded');
            console.log(`State after 100ms:`, { newState, ariaExpanded });
          }, 100);
        };
        
        // Handle click events
        button.addEventListener('click', toggleExpansion);
        console.log(`✅ Event listener added to profile ${index}`);
        
        // Add keyboard support for Enter key
        button.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            console.log(`⌨️ Keyboard toggle on profile ${index}`);
            toggleExpansion(e);
          }
        });
      }
    });
  }

  // Run on initial load
  if (document.readyState === 'loading') {
    console.log('📄 DOM is loading, waiting for DOMContentLoaded...');
    document.addEventListener('DOMContentLoaded', setupRPCSSSpeakerProfile);
  } else {
    console.log('📄 DOM is ready, running setup immediately...');
    setupRPCSSSpeakerProfile();
  }

  // Run on client-side navigation
  document.addEventListener('astro:page-load', () => {
    console.log('🚀 Astro page load event fired');
    setupRPCSSSpeakerProfile();
  });
</script>

<style>
  .chevron-icon {
    transition: none;
  }
  
  .chevron-icon.transition-enabled {
    transition: transform 0.3s ease-in-out;
  }
  
  .rotated {
    transform: rotate(180deg) !important;
  }
  
  /* Reset to ensure no rotation by default */
  [data-expand-icon]:not(.rotated) {
    transform: rotate(0deg) !important;
  }
</style> 