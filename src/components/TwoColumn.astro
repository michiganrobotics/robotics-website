---
interface Props {
  leftWidth?: string;
  rightWidth?: string;
}

// Default to fr units for better grid behavior
const { leftWidth = "1fr", rightWidth = "1fr" } = Astro.props;
---

<div class="two-column">
  <div class="left-column">
    <slot name="left" />
  </div>
  <div class="right-column">
    <slot name="right" />
  </div>
</div>

<style>
  .two-column {
    display: grid;
    grid-template-columns: var(--left-width) var(--right-width);
    gap: 1.5rem; /* Slightly reduced gap */
    margin: 1rem 0;
    max-width: 100%; /* Use parent's width constraints */
    width: 100%;
    box-sizing: border-box; /* Include padding and border in the element's width */
  }
  
  @media (max-width: 768px) {
    .two-column {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
  }

  .left-column, .right-column {
    width: 100%;
    min-width: 0;
    max-width: 100%; /* Ensure content doesn't overflow */
    overflow-wrap: break-word; /* Handle long words */
    word-wrap: break-word; /* Legacy support */
  }
</style>

<script>
  // Set custom properties for column widths
  const twoColumns = document.querySelectorAll('.two-column');
  twoColumns.forEach(col => {
    const leftWidth = col.getAttribute('left-width') || '1fr';
    const rightWidth = col.getAttribute('right-width') || '1fr';
    (col as HTMLElement).style.setProperty('--left-width', leftWidth);
    (col as HTMLElement).style.setProperty('--right-width', rightWidth);
  });
</script> 