---
import { getCollection } from 'astro:content';
import Link from './Link.astro';
import { Icon } from 'astro-icon/components';

// Get current page path from Astro
const currentPath = Astro.url.pathname;

// Get all academic content and filter out specific pages
const academicContent = await getCollection('academics');

// Debug: Log all entry IDs to see the correct paths
console.log('Entry IDs:', academicContent.map(entry => entry.id));

const filteredContent = academicContent.filter(entry => {
  // Pages to exclude from search
  const excludedPages = [
    'index',
    'graduate',
    'graduate/new-graduate-students'  // Removed /index.mdx
  ];
  return !excludedPages.includes(entry.id.replace(/\/index\.mdx$/, ''));
});

function cleanMDXContent(content: string): string {
  return content
    // Remove MDX component tags
    .replace(/<[^>]+>/g, '')
    // Remove markdown links
    .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1')
    // Remove markdown headers
    .replace(/#{1,6}\s/g, '')
    // Remove markdown emphasis
    .replace(/[*_]{1,2}([^*_]+)[*_]{1,2}/g, '$1')
    // Remove code blocks
    .replace(/```[\s\S]*?```/g, '')
    // Remove inline code
    .replace(/`([^`]+)`/g, '$1')
    // Remove import statements
    .replace(/^import.*from.*$/gm, '')
    // Collapse multiple newlines
    .replace(/\n\s*\n/g, '\n')
    // Collapse multiple spaces
    .replace(/\s+/g, ' ')
    .trim();
}

const searchableContent = filteredContent.map(entry => {
  // Get the full path without the /index.mdx at the end
  const fullPath = entry.id.replace(/\/index\.mdx$/, '');
  
  // Create breadcrumbs from the path
  const pathParts = fullPath.split('/');
  const breadcrumbs = pathParts.map(part => 
    part === 'index' ? 'Academics' : 
    part.split('-').map(word => 
      word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ')
  );
  
  return {
    title: entry.data.title || '',
    description: entry.data.description || '',
    // Clean the content before storing
    content: cleanMDXContent(entry.body || ''),
    path: fullPath === 'index' ? '/academics' : `/academics/${fullPath}`,
    breadcrumbs
  };
});
---

<div class="not-prose mb-6">
  <input
    type="text"
    id="academic-search"
    placeholder="Search academic needs such as ROB 590, override, or auditing..."
    class="search-bar"
    aria-label="Search academic pages"
  />
  <div id="search-results" class="mt-4 space-y-4 hidden">
    <!-- Results will be populated here -->
  </div>
</div>

<script define:vars={{ searchableContent, currentPath }}>
  const searchInput = document.getElementById('academic-search');
  const resultsDiv = document.getElementById('search-results');

  function getContextSnippet(content, searchTerm, maxLength = 200) {
    const lowerContent = content.toLowerCase();
    const index = lowerContent.indexOf(searchTerm.toLowerCase());
    
    if (index === -1) return '';
    
    // Get surrounding context
    const start = Math.max(0, index - maxLength / 2);
    const end = Math.min(content.length, index + searchTerm.length + maxLength / 2);
    let snippet = content.slice(start, end);
    
    // Add ellipsis if we're not at the start/end
    if (start > 0) snippet = '...' + snippet;
    if (end < content.length) snippet = snippet + '...';
    
    // Highlight the search term with maize color in dark mode
    const highlightedSnippet = snippet.replace(
      new RegExp(searchTerm, 'gi'),
      match => `<mark class="bg-yellow-200 text-gray-900 dark:bg-maize dark:text-gray-900">${match}</mark>`
    );
    
    return highlightedSnippet;
  }

  let debounceTimeout;

  // Function to show search results
  function showResults() {
    resultsDiv?.classList.remove('hidden');
  }

  // Function to hide search results
  function hideResults() {
    resultsDiv?.classList.add('hidden');
  }

  // Function to handle search
  function handleSearch(searchTerm) {
    if (searchTerm.length < 2) {
      hideResults();
      return;
    }

    const results = searchableContent.filter(item => 
      item.title.toLowerCase().includes(searchTerm) ||
      (item.description || '').toLowerCase().includes(searchTerm) ||
      (item.content || '').toLowerCase().includes(searchTerm)
    );

    if (results.length > 0) {
      showResults();
      resultsDiv.innerHTML = results
        .map(result => {
          const snippet = getContextSnippet(result.content, searchTerm) || 
                        getContextSnippet(result.description || '', searchTerm) ||
                        getContextSnippet(result.title, searchTerm);
          
          const isCurrentPage = currentPath === result.path || 
                              currentPath.replace(/\/$/, '') === result.path;
          
          if (isCurrentPage) {
            return `
              <div class="surface card-base card-padded">
                <div class="text-sm text-neutral-600 dark:text-neutral-200 mb-1">
                  ${result.breadcrumbs.join(' > ')}
                </div>
                <div class="flex items-center gap-2 mb-2">
                  <h3 class="text-xl font-bold text-neutral-700 dark:text-neutral-300">${result.title}</h3>
                  <span class="text-xs bg-matthaeiViolet dark:bg-matthaeiViolet text-neutral-100 px-2 py-1 rounded">Current page</span>
                </div>
                ${snippet ? 
                  `<div class="text-sm elevated card-base card-padded rounded border border-gray-200 dark:border-gray-700">
                    <span class="italic">On this page:</span><br>${snippet}
                  </div>` 
                  : ''}
              </div>
            `;
          }
          
          return `
            <a href="${result.path}" class="block group no-underline">
              <div class="surface card-base card-padded transition-all duration-100 ease-in-out group-hover:shadow-lg group-hover:scale-[1.01]">
                <div class="text-sm text-neutral-600 dark:text-neutral-300 mb-1">
                  ${result.breadcrumbs.join(' > ')}
                </div>
                <h3 class="text-xl font-bold text-primary group-hover:underline group-hover:decoration-maize group-hover:decoration-2 mb-2">${result.title}</h3>
                ${snippet ? 
                  `<div class="text-sm elevated card-base card-padded rounded border border-gray-200 dark:border-gray-700">
                    <span class="italic">On the page:</span><br>${snippet}
                  </div>` 
                  : ''}
              </div>
            </a>
          `;
        })
        .join('');
    } else {
      showResults();
      resultsDiv.innerHTML = `
        <div class="surface card-base card-padded text-center">
          <div class="flex flex-col items-center gap-3">
            <p class="text-lg font-medium text-neutral-700 dark:text-neutral-200 mb-2">
              No results found for "${searchTerm}"
            </p>
            <div class="text-neutral-900 dark:text-neutral-200">
              <p class="mb-2">Try searching with different terms or check our program guides:</p>
              <div class="flex justify-center gap-4 mt-3">
                <a href="/undergrad-guide" class="inline-flex items-center gap-1">
                  Undergraduate Program Guide
                   <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/></svg>
                </a>
                <a href="/grad-guide" class="inline-flex items-center gap-1">
                  Graduate Program Guide
                   <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/></svg>
                </a>
              </div>
            </div>
          </div>
        </div>
      `;
    }
  }

  // Input event handler with debounce
  searchInput?.addEventListener('input', (e) => {
    clearTimeout(debounceTimeout);
    const searchTerm = e.target.value.toLowerCase();
    debounceTimeout = setTimeout(() => handleSearch(searchTerm), 300);
  });

  // Focus event handler
  searchInput?.addEventListener('focus', () => {
    if (searchInput.value.length >= 2) {
      showResults();
    }
  });

  // Click outside handler
  document.addEventListener('click', (e) => {
    if (e.target instanceof HTMLElement && 
        !e.target.closest('#academic-search') && 
        !e.target.closest('#search-results')) {
      hideResults();
    }
  });

  // Escape key handler
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      hideResults();
      searchInput?.blur();
    }
  });
</script> 