---
import type { HTMLAttributes } from 'astro/types';
import Pill from './Pill.astro';

interface Props {
  title: string;
  titlePill?: 'ms' | 'phd';  // Optional pill type for the title
  id?: string;
  headingLevel?: string;
}

const { title, titlePill, id, headingLevel = "h2" } = Astro.props;
const HeadingTag = headingLevel;
const uniqueId = id || title.toLowerCase().replace(/\s+/g, '-');
---

<div 
  class="accordion border-matthaeiViolet dark:border-arboretumBlue border-2 rounded-lg mb-4 overflow-hidden shadow-sm hover:shadow-md transition-shadow duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-maize focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:focus-visible:ring-offset-arboretumBlue"
  tabindex="0"
  role="region"
  aria-expanded="false"
  aria-labelledby={`accordion-header-${uniqueId}`}
>
  <button
    id={`accordion-header-${uniqueId}`}
    class="accordion-trigger flex justify-between items-center w-full p-5 text-left bg-matthaeiViolet/5 dark:bg-arboretumBlue/30 text-gray-800 dark:text-neutral-100 hover:bg-matthaeiViolet/10 dark:hover:bg-arboretumBlue transition-all duration-200 cursor-pointer gap-4"
    aria-controls={`accordion-content-${uniqueId}`}
    tabindex="-1"
  >
    <span class="font-medium text-lg font-roboto flex-1">
      {title}
      {titlePill && <Pill type={titlePill} />}
    </span>
    <svg 
      class="w-5 h-5 transform transition-transform duration-200 flex-shrink-0" 
      fill="none" 
      stroke="currentColor" 
      viewBox="0 0 24 24" 
      xmlns="http://www.w3.org/2000/svg"
    >
      <path 
        stroke-linecap="round" 
        stroke-linejoin="round" 
        stroke-width="2" 
        d="M19 9l-7 7-7-7"
      ></path>
    </svg>
  </button>
  <div 
    id={`accordion-content-${uniqueId}`}
    class="accordion-content hidden"
  >
    <div class="p-6 bg-neutral-50 dark:bg-arboretumBlue/30 prose dark:prose-invert max-w-none dark:prose-ul:text-white dark:prose-ol:text-white dark:marker:text-maize">
      <slot />
    </div>
  </div>
</div>

<style>
  @reference "../styles/global.css";
  .accordion .button-component {
    @apply bg-umichblue text-white dark:bg-maize dark:text-white hover:bg-umichblue/90 dark:hover:bg-maize/90 transition-colors;
  }

  /* Add a subtle border between items when expanded */
  .accordion[aria-expanded="true"] button {
    @apply border-b border-gray-200 dark:border-gray-700 bg-matthaeiViolet/20 dark:bg-arboretumBlue;
  }

  /* Add a default bottom border that's transparent */
  .accordion button {
    @apply border-b border-transparent outline-none;
  }

  /* Rotate the arrow icon when expanded */
  .accordion[aria-expanded="true"] svg {
    @apply rotate-180;
  }

  /* Safari-only scroll margin */
  @supports (-webkit-hyphens:none) {
    .accordion h2,
    .accordion h3,
    .accordion h4,
    .accordion h5,
    .accordion h6 {
      scroll-margin-top: 100px;
    }
  }
</style>

<script>
  // Initialize all accordions
  function initAccordions() {
    const accordions = document.querySelectorAll('.accordion');
    
    accordions.forEach(accordion => {
      const trigger = accordion.querySelector('.accordion-trigger');
      const contentId = trigger.getAttribute('aria-controls');
      const content = document.getElementById(contentId);
      
      // Initial state check - ensure DOM and aria state are in sync
      if (content && !content.classList.contains('hidden')) {
        accordion.setAttribute('aria-expanded', 'true');
      }
      
      trigger.addEventListener('click', (e) => {
        // Prevent default button behavior that might cause page jumps
        e.preventDefault();
        
        // Store current scroll position
        const scrollPosition = window.scrollY;
        
        // Toggle aria-expanded on the accordion container
        const isExpanded = accordion.getAttribute('aria-expanded') === 'true';
        const newExpandedState = (!isExpanded).toString();
        accordion.setAttribute('aria-expanded', newExpandedState);
        
        // Toggle content visibility
        if (content) {
          content.classList.toggle('hidden');
        }
        
        // Restore scroll position to prevent jumps
        window.scrollTo({
          top: scrollPosition
        });
      });
    });
  }

  // Handle direct links to anchors inside accordions
  function handleHashTargets() {
    if (window.location.hash) {
      const targetElement = document.querySelector(window.location.hash);
      if (targetElement) {
        // Find parent accordion if the target is inside one
        const accordionContent = targetElement.closest('.accordion-content');
        if (accordionContent) {
          // Find and expand the accordion
          const accordion = accordionContent.closest('.accordion');
          if (accordion) {
            accordion.setAttribute('aria-expanded', 'true');
            accordionContent.classList.remove('hidden');
            
            // Scroll to the target after a brief delay
            setTimeout(() => {
              targetElement.scrollIntoView({ behavior: 'smooth' });
            }, 100);
          }
        }
      }
    }
  }

  // Handle clicks on anchor links that point to elements inside accordions
  function handleAnchorClicks() {
    document.addEventListener('click', (e) => {
      const target = e.target;
      const link = target.closest('a');
      if (link && link.hash && link.origin + link.pathname === window.location.origin + window.location.pathname) {
        const targetElement = document.querySelector(link.hash);
        if (targetElement) {
          // Find parent accordion if the target is inside one
          const accordionContent = targetElement.closest('.accordion-content');
          if (accordionContent) {
            e.preventDefault();
            
            // Find and expand the accordion
            const accordion = accordionContent.closest('.accordion');
            if (accordion) {
              accordion.setAttribute('aria-expanded', 'true');
              accordionContent.classList.remove('hidden');
              
              // Scroll to the target after a brief delay
              setTimeout(() => {
                targetElement.scrollIntoView({ behavior: 'smooth' });
              }, 100);
            }
          }
        }
      }
    });
  }

  // Add keyboard support for accordion containers
  function setupKeyboardSupport() {
    const accordions = document.querySelectorAll('.accordion');
    accordions.forEach(accordion => {
      accordion.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          const button = accordion.querySelector('.accordion-trigger');
          if (button) {
            button.click();
          }
        }
      });
    });
  }

  // Run when the DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    initAccordions();
    handleHashTargets();
    handleAnchorClicks();
    setupKeyboardSupport();
  });
</script>
