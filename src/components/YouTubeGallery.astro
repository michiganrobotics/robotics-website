---
import { YouTube } from 'astro-embed';

interface Props {
  playlistId: string;
  title?: string;
  description?: string;
}

interface YouTubeVideo {
  snippet: {
    title: string;
    publishedAt: string;
    resourceId: {
      videoId: string;
    };
  };
}

const { playlistId, title, description } = Astro.props;

// Fetch playlist data
const YOUTUBE_API_KEY = import.meta.env.YOUTUBE_API_KEY;
const response = await fetch(
  `https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&playlistId=${playlistId}&maxResults=50&key=${YOUTUBE_API_KEY}`
);
const data = await response.json();
const videos: YouTubeVideo[] = data.items || [];
---

<div class="w-full">
  {title && <h2 class="text-2xl font-bold mb-4">{title}</h2>}
  {description && <p class="mb-6">{description}</p>}
  
  <div class="relative">
    <div class="flex overflow-x-auto pb-4 gap-4 snap-x snap-mandatory scrollbar-hide">
      {videos.map((video) => (
        <div class="flex-none w-[300px] snap-center">
          <div class="surface rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-300">
            <div class="aspect-video">
              <YouTube id={video.snippet.resourceId.videoId} />
            </div>
            <div class="p-4">
              <h3 class="text-lg font-semibold mb-2 line-clamp-2">{video.snippet.title}</h3>
              <p class="text-sm text-gray-600 dark:text-gray-400">
                {new Date(video.snippet.publishedAt).toLocaleDateString()}
              </p>
            </div>
          </div>
        </div>
      ))}
    </div>
    
    <!-- Scroll indicators -->
    <div class="absolute left-0 top-1/2 -translate-y-1/2 w-12 h-12 flex items-center justify-center">
      <button class="scroll-left-btn opacity-0 hover:opacity-100 transition-opacity duration-300">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
    </div>
    <div class="absolute right-0 top-1/2 -translate-y-1/2 w-12 h-12 flex items-center justify-center">
      <button class="scroll-right-btn opacity-0 hover:opacity-100 transition-opacity duration-300">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </div>
  </div>
</div>

<script>
  const container = document.querySelector('.flex.overflow-x-auto');
  const scrollLeftBtn = document.querySelector('.scroll-left-btn');
  const scrollRightBtn = document.querySelector('.scroll-right-btn');
  
  if (container && scrollLeftBtn && scrollRightBtn) {
    scrollLeftBtn.addEventListener('click', () => {
      container.scrollBy({ left: -300, behavior: 'smooth' });
    });
    
    scrollRightBtn.addEventListener('click', () => {
      container.scrollBy({ left: 300, behavior: 'smooth' });
    });
    
    // Show/hide scroll buttons based on scroll position
    container.addEventListener('scroll', () => {
      scrollLeftBtn.style.opacity = container.scrollLeft > 0 ? '1' : '0';
      scrollRightBtn.style.opacity = 
        container.scrollLeft < container.scrollWidth - container.clientWidth ? '1' : '0';
    });
  }
</script>

<style>
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
</style> 