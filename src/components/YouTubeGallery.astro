---
import { YouTube } from 'astro-embed';

interface Props {
  playlistId: string;
  title?: string;
  description?: string;
  showDate?: boolean;
}

interface YouTubeVideo {
  snippet: {
    title: string;
    publishedAt: string;
    resourceId: {
      videoId: string;
    };
  };
}

const { playlistId, title, description, showDate = true } = Astro.props;

// Fetch playlist data
const YOUTUBE_API_KEY = import.meta.env.YOUTUBE_API_KEY;
const response = await fetch(
  `https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&playlistId=${playlistId}&maxResults=50&key=${YOUTUBE_API_KEY}`
);
const data = await response.json();
const videos: YouTubeVideo[] = data.items || [];
---

<div class="w-full">
  {title && <h2 class="text-2xl font-bold mb-4">{title}</h2>}
  {description && <p class="mb-6">{description}</p>}
  
  <div class="relative" role="region" aria-label="YouTube video gallery">
    <div class="flex overflow-x-auto pb-4 gap-4 scrollbar-hide cursor-grab active:cursor-grabbing" id="gallery-container">
      {videos.map((video) => (
        <div class="flex-none w-[300px] snap-center">
          <div class="surface rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-300">
            <div class="aspect-video">
              <YouTube id={video.snippet.resourceId.videoId} />
            </div>
            <div class="px-3 mt-4 pb-2">
              <h3 class="not-prose text-md font-semibold line-clamp-2">{video.snippet.title}</h3>
              {showDate && (
                <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
                  {new Date(video.snippet.publishedAt).toLocaleDateString()}
                </p>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
    
    <!-- Scroll indicators -->
    <div class="absolute left-0 top-1/2 -translate-y-1/2 w-12 h-12 flex items-center justify-center scroll-left-container hidden">
      <button 
        class="scroll-left-btn bg-white/80 dark:bg-gray-800/80 rounded-full p-2 shadow-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        aria-label="Scroll left"
        tabindex="0"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
    </div>
    <div class="absolute right-0 top-1/2 -translate-y-1/2 w-12 h-12 flex items-center justify-center scroll-right-container">
      <button 
        class="scroll-right-btn bg-white/80 dark:bg-gray-800/80 rounded-full p-2 shadow-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        aria-label="Scroll right"
        tabindex="0"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('#gallery-container');
    const scrollLeftBtn = document.querySelector('.scroll-left-btn');
    const scrollRightBtn = document.querySelector('.scroll-right-btn');
    const scrollLeftContainer = document.querySelector('.scroll-left-container');
    const scrollRightContainer = document.querySelector('.scroll-right-container');
    
    if (container && scrollLeftBtn && scrollRightBtn && scrollLeftContainer && scrollRightContainer) {
      // Mouse drag scrolling
      let isMouseDown = false;
      let startX: number;
      let scrollLeft: number;

      container.addEventListener('mousedown', ((e: MouseEvent) => {
        isMouseDown = true;
        container.classList.add('cursor-grabbing');
        container.classList.remove('cursor-grab');
        startX = e.pageX - (container as HTMLElement).offsetLeft;
        scrollLeft = (container as HTMLElement).scrollLeft;
      }) as EventListener);

      container.addEventListener('mouseleave', () => {
        isMouseDown = false;
        container.classList.remove('cursor-grabbing');
        container.classList.add('cursor-grab');
      });

      container.addEventListener('mouseup', () => {
        isMouseDown = false;
        container.classList.remove('cursor-grabbing');
        container.classList.add('cursor-grab');
      });

      container.addEventListener('mousemove', ((e: MouseEvent) => {
        if (!isMouseDown) return;
        e.preventDefault();
        const x = e.pageX - (container as HTMLElement).offsetLeft;
        const walk = (x - startX) * 1.5; // Scroll speed multiplier
        (container as HTMLElement).scrollLeft = scrollLeft - walk;
      }) as EventListener);

      // Prevent text selection while dragging
      container.addEventListener('selectstart', (e) => {
        if (isMouseDown) e.preventDefault();
      });

      // Check if there's overflow content to scroll
      const checkScrollability = () => {
        const hasOverflow = container.scrollWidth > container.clientWidth;
        
        // Hide containers if no overflow
        if (!hasOverflow) {
          scrollLeftContainer.classList.add('hidden');
          scrollRightContainer.classList.add('hidden');
        } else {
          // Show right button at start (if we can scroll)
          scrollRightContainer.classList.remove('hidden');
          
          // Update button states based on scroll position
          updateButtonStates();
        }
      };
      
      const updateButtonStates = () => {
        const atStart = container.scrollLeft <= 0;
        const atEnd = Math.ceil(container.scrollLeft + container.clientWidth) >= container.scrollWidth;
        
        // Completely hide left button at start
        if (atStart) {
          scrollLeftContainer.classList.add('hidden');
        } else {
          scrollLeftContainer.classList.remove('hidden');
        }
        
        // Completely hide right button at end
        if (atEnd) {
          scrollRightContainer.classList.add('hidden');
        } else {
          scrollRightContainer.classList.remove('hidden');
        }
      };
      
      scrollLeftBtn.addEventListener('click', () => {
        container.scrollBy({ left: -300, behavior: 'smooth' });
      });
      
      scrollRightBtn.addEventListener('click', () => {
        container.scrollBy({ left: 300, behavior: 'smooth' });
      });
      
      // Get all YouTube embeds
      const youtubeEmbeds = Array.from(container.querySelectorAll('.aspect-video iframe'));
      
      // Set tabindex on YouTube iframes
      youtubeEmbeds.forEach(embed => {
        (embed as HTMLElement).setAttribute('tabindex', '0');
      });
      
      // Add keyboard navigation
      // Add keyboard navigation on the gallery container
      const galleryRegion = container.closest('[role="region"]');
      if (galleryRegion) {
        galleryRegion.addEventListener('keydown', (e) => {
          const event = e as KeyboardEvent;
          
          // Skip video by video with Tab key handling is done by the browser
          
          // Page left/right with arrow keys when focus is on the gallery container
          if (document.activeElement === galleryRegion) {
            if (event.key === 'ArrowLeft') {
              event.preventDefault();
              container.scrollBy({ left: -300, behavior: 'smooth' });
            } else if (event.key === 'ArrowRight') {
              event.preventDefault();
              container.scrollBy({ left: 300, behavior: 'smooth' });
            }
          }
          
          // Support Home/End keys
          if (event.key === 'Home') {
            event.preventDefault();
            container.scrollTo({ left: 0, behavior: 'smooth' });
          } else if (event.key === 'End') {
            event.preventDefault();
            container.scrollTo({ left: container.scrollWidth, behavior: 'smooth' });
          }
          
          // Support Page Up/Down
          if (event.key === 'PageUp') {
            event.preventDefault();
            container.scrollBy({ left: -container.clientWidth, behavior: 'smooth' });
          } else if (event.key === 'PageDown') {
            event.preventDefault();
            container.scrollBy({ left: container.clientWidth, behavior: 'smooth' });
          }
        });
      }
      
      // Show/hide scroll buttons based on scroll position
      container.addEventListener('scroll', updateButtonStates);
      
      // Initial check
      checkScrollability();
      
      // Recheck on window resize
      window.addEventListener('resize', checkScrollability);
    }
  });
</script>

<style>
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
</style> 