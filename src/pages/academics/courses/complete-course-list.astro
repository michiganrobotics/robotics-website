---
// src/pages/focus-areas/index.astro
import Layout from '../../../layouts/MainLayout.astro';
import { Image } from 'astro:assets';
import Breadcrumbs from "../../../components/Breadcrumbs.astro";
import PageTitle from "../../../components/PageTitle.astro";
import { getCourseList } from '../../../lib/googleSheets';

import featureImage from '../../../images/featured-images/academics-complete-course-list.jpg';
import ogFeatureImage from '../../../images/featured-images/og/academics-complete-course-list.jpg';
const courseList = await getCourseList();
---

<Layout title="Complete Course List | Michigan Robotics" image={ogFeatureImage.src} imageAlt="Students working with faculty in the student team space on a laptop" imagePosition="25% 75%" description="The complete list of robotics and robotics-related courses that satisfy robotics undergraduate or graduate degree requirements.">
    <Breadcrumbs />
    <PageTitle title="Complete Course List" image={featureImage} imageAlt="Students studying in the Robotics Building atrium" imagePosition="25% 75%" />
      <div class="prose dark:prose-invert max-w-6xl w-11/12 mx-auto mt-4 mb-4">
          <p class="mb-4">
            These robotics and robotics-related courses satisfy robotics undergraduate or graduate degree requirements. These courses are typically offered different terms. To find out which robotics courses are currently offered this term, see <a href="/academics/courses/course-offerings/">current term courses</a>.
          </p>
          <p class="mb-4">
            Search to find courses that meet specific undergraduate or graduate degree requirements, such as courses in <strong>sensing</strong>, <strong>reasoning</strong>, and <strong>acting</strong>.
          </p>
          <div class="relative">
              <div class="mb-4">
                <input type="text" id="searchInput" placeholder="Search courses..." 
                  class="search-bar"
                />
              </div>
              <div class="overflow-x-auto shadow-md">
                <table class="w-full text-sm text-left">
                  <thead class="text-xs uppercase page-bg">
                    <tr>
                      <th scope="col" class="px-4 py-3 cursor-pointer border-r" data-sort="id">
                        Course ID
                        <span class="ml-1">↕</span>
                      </th>
                      <th scope="col" class="px-4 py-3 cursor-pointer border-r" data-sort="title">
                        Title
                        <span class="ml-1">↕</span>
                      </th>
                      <th scope="col" class="px-4 py-3 cursor-pointer border-r" data-sort="credits">
                        Credits
                        <span class="ml-1">↕</span>
                      </th>
                      <th scope="col" class="px-4 py-3 cursor-pointer border-r" data-sort="department">
                        Department
                        <span class="ml-1">↕</span>
                      </th>
                      <th scope="col" class="px-4 py-3 cursor-pointer border-r" data-sort="requirements">
                        Requirements
                        <span class="ml-1">↕</span>
                      </th>
                      <th scope="col" class="px-4 py-3 cursor-pointer border-r" data-sort="semesters">
                        Semesters Offered
                        <span class="ml-1">↕</span>
                      </th>
                      <th scope="col" class="px-4 py-3 cursor-pointer border-r" data-sort="crosslist">
                        Cross-listings
                        <span class="ml-1">↕</span>
                      </th>
                      <th scope="col" class="px-4 py-3 cursor-pointer" data-sort="notes">
                        Notes
                        <span class="ml-1">↕</span>
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {courseList.map((course) => (
                      <tr class="bg-[var(--bg-undersurface-light)] dark:bg-[var(--bg-undersurface-dark)] border-b hover:bg-[var(--bg-surface-hover)] dark:hover:bg-[var(--bg-surface-hover-dark)]">
                        <th scope="row" class="px-6 py-4 font-medium border-r align-middle">
                          {course.courseSubject} {course.courseNumber}
                        </th>
                        <td class="px-6 py-4 border-r align-middle">
                          {course.courseLink ? <a href={course.courseLink} target="_blank" rel="noopener noreferrer" class="underline hover:text-umichblue dark:hover:text-gray-300">{course.courseTitle}</a> : course.courseTitle}
                        </td>
                        <td class="px-6 py-4 border-r align-middle">
                          {course.credits}
                        </td>
                        <td class="px-6 py-4 border-r align-middle">
                          {course.homeDepartment}
                        </td>
                        <td class="px-6 py-4 border-r align-middle">
                          <div>UG: {course.undergradRequirement}</div>
                          <div>Grad: {course.gradRequirement}</div>
                        </td>
                        <td class="px-6 py-4 border-r align-middle">
                          {course.semestersOffered}
                        </td>
                        <td class="px-6 py-4 border-r align-middle">
                          {course.crossListing}
                        </td>
                        <td class="px-6 py-4 align-middle">
                          {course.courseNote}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          <script>
            // Search functionality
            const searchInput = document.getElementById('searchInput');
            const tableRows = document.querySelectorAll('tbody tr');
            
            if (searchInput) {
              searchInput.addEventListener('keyup', function(e) {
                if (e.target) {
                  const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
                  
                  tableRows.forEach(row => {
                    const text = row.textContent?.toLowerCase() || '';
                    if (row instanceof HTMLElement) {
                      row.style.display = text.includes(searchTerm) ? '' : 'none';
                    }
                  });
                }
              });
            }

            // Sorting functionality
            const getCellValue = (tr: HTMLElement, idx: number) => {
              const cell = tr.children[idx];
              return cell ? cell.textContent || '' : '';
            };
            
            const comparer = (idx: number, asc: boolean) => (a: HTMLElement, b: HTMLElement) => {
              const v1 = getCellValue(a, idx);
              const v2 = getCellValue(b, idx);
              return v1 !== '' && v2 !== '' && !isNaN(Number(v1)) && !isNaN(Number(v2))
                ? (asc ? 1 : -1) * (Number(v1) - Number(v2))
                : (asc ? 1 : -1) * v1.toString().localeCompare(v2);
            };
            
            document.querySelectorAll('th[data-sort]').forEach(th => {
              let asc = true;
              th.addEventListener('click', () => {
                const table = th.closest('table');
                const tbody = table?.querySelector('tbody');
                if (!tbody) return;
                
                const columnIndex = Array.from(th.parentElement?.children || []).indexOf(th);
                
                // Update sort indicators
                if (th.parentElement) {
                  th.parentElement.querySelectorAll('th').forEach(header => {
                    const span = header.querySelector('span');
                    if (span) {
                      span.textContent = '↕';
                    }
                  });
                }
                
                const span = th.querySelector('span');
                if (span) {
                  span.textContent = asc ? '↑' : '↓';
                }
                
                const rows = Array.from(tbody.querySelectorAll('tr'));
                rows.sort(comparer(columnIndex, asc))
                  .forEach(tr => tbody.appendChild(tr));
                
                asc = !asc;
              });
            });
          </script>
