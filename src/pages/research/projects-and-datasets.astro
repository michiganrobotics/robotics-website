---
// src/pages/focus-areas/index.astro
import Layout from '../../layouts/MainLayout.astro';
import { Image } from 'astro:assets';
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import PageTitle from "../../components/PageTitle.astro";
import { getProjectsDatasets } from '../../lib/googleSheets';

import featureImage from '../../images/featured-images/projects-and-datasets.jpg';
import ogFeatureImage from '../../images/featured-images/og/projects-and-datasets.jpg'; 

const projectsDatasets = await getProjectsDatasets();
---

<Layout title="Projects and Datasets | Michigan Robotics" image={ogFeatureImage.src} description="These projects are a sample of contributions to the robotics community.">
<Breadcrumbs />
<PageTitle title="Open-source Projects and Datasets" image={featureImage} imageAlt="Motors, gears, and 3d printed parts"/>
      
          <div class="relative mt-4 mb-4 max-w-6xl w-11/12 mx-auto">
            <div class="mb-4">
              <input type="text" id="searchInput" placeholder="Search projects and datasets..." 
                class="search-bar"
              />
            </div>
            <div class="overflow-x-auto shadow-md">
              <table class="w-full text-sm text-left">
                <thead class="text-xs uppercase page-bg">
                  <tr>
                    <th scope="col" class="px-4 py-3 cursor-pointer border-r" data-sort="name">
                      Project/Dataset Name
                      <span class="ml-1">↕</span>
                    </th>
                    <th scope="col" class="px-4 py-3 border-r">
                      Description
                    </th>
                    <th scope="col" class="px-4 py-3 cursor-pointer" data-sort="owner">
                      Owner
                      <span class="ml-1">↕</span>
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {projectsDatasets.map((projectDataset) => (
                    <tr class="bg-[var(--bg-undersurface-light)] dark:bg-[var(--bg-undersurface-dark)] border-b border-gray-200 dark:border-gray-700 hover:bg-[var(--bg-surface-hover)] dark:hover:bg-[var(--bg-surface-hover-dark)]">
                      <th scope="row" class="px-6 py-4 font-medium border-r">
                        <a href={projectDataset.projectLink} 
                           class="underline hover:text-umichblue dark:hover:text-gray-300"
                           aria-label={`View project/dataset: ${projectDataset.projectName}`}>
                          {projectDataset.projectName}
                        </a>
                      </th>
                      <td class="px-6 py-4 border-r" role="cell">
                        {projectDataset.projectDescription}
                      </td>
                      <td class="px-6 py-4" role="cell">
                        {projectDataset.projectOwner}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

          <script>
            // Search functionality
            const searchInput = document.getElementById('searchInput');
            const tableRows = document.querySelectorAll('tbody tr');
            
            if (searchInput) {
              searchInput.addEventListener('keyup', function(e) {
                if (e.target) {
                  const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
                  
                  tableRows.forEach(row => {
                    const text = row.textContent?.toLowerCase() || '';
                    if (row instanceof HTMLElement) {
                      row.style.display = text.includes(searchTerm) ? '' : 'none';
                    }
                  });
                }
              });
            }

            // Sorting functionality
            const getCellValue = (tr: HTMLElement, idx: number) => {
              const cell = tr.children[idx];
              return cell ? cell.textContent || '' : '';
            };
            
            const comparer = (idx: number, asc: boolean) => (a: HTMLElement, b: HTMLElement) => {
              const v1 = getCellValue(a, idx);
              const v2 = getCellValue(b, idx);
              return v1 !== '' && v2 !== '' && !isNaN(Number(v1)) && !isNaN(Number(v2))
                ? (asc ? 1 : -1) * (Number(v1) - Number(v2))
                : (asc ? 1 : -1) * v1.toString().localeCompare(v2);
            };
            
            document.querySelectorAll('th[data-sort]').forEach(th => {
              let asc = true;
              th.addEventListener('click', () => {
                const table = th.closest('table');
                const tbody = table?.querySelector('tbody');
                if (!tbody) return;
                
                const columnIndex = Array.from(th.parentElement?.children || []).indexOf(th);
                
                // Update sort indicators
                if (th.parentElement) {
                  th.parentElement.querySelectorAll('th').forEach(header => {
                    const span = header.querySelector('span');
                    if (span) {
                      span.textContent = '↕';
                    }
                  });
                }
                
                const span = th.querySelector('span');
                if (span) {
                  span.textContent = asc ? '↑' : '↓';
                }
                
                const rows = Array.from(tbody.querySelectorAll('tr'));
                rows.sort(comparer(columnIndex, asc))
                  .forEach(tr => tbody.appendChild(tr));
                
                asc = !asc;
              });
            });
          </script>