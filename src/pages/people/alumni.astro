---
// src/pages/focus-areas/index.astro
import Layout from '../../layouts/MainLayout.astro';
import { Image } from 'astro:assets';
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import PageTitle from "../../components/PageTitle.astro";
import { getAlumni } from '../../lib/googleSheets';

import featureImage from '../../images/featured-images/people-alumni.jpg';
import ogFeatureImage from '../../images/featured-images/og/people-alumni.jpg';
const alumni = await getAlumni();
const sortedAlumni = [...alumni].sort((a, b) => Number(b.graduationYear) - Number(a.graduationYear));
---

<Layout title="Alumni | Michigan Robotics" image={ogFeatureImage.src} description="Michigan Robotics alumni who are making a difference in the field of robotics.">
    <Breadcrumbs />
    <PageTitle title="Alumni" image={featureImage} imageAlt="Graduates file in for commencement" />
          <div class="prose dark:prose-invert mt-4 mb-4 max-w-6xl w-11/12 mx-auto">
            <div class="mb-8 mt-8 relative">
              <h2 class="text-xl font-roboto text-gray-800 dark:text-gray-200 leading-relaxed not-prose tracking-wide">
                "Wherever you go, go blue!"
              </h2>
              <div class="subtitle-double-line"></div>
            </div>

            <p>Get a sense of the roles and organizations that Michigan Robotics alumni take on after graduation. The alumni below are only a small sample of the many talented individuals who have graduated from the program. The Engineering Career Resource Center (ECRC) allows you to explore more detailed <a href="https://career.engin.umich.edu/students/michigan-engineering-student-salary-information/">post-graduation and internship employment data.</a></p>

            <div class="relative">
              <div class="overflow-x-auto shadow-md">
                <table class="w-full text-sm text-left">
                  <thead class="text-xs uppercase page-bg">
                    <tr>
                      <th scope="col" class="px-4 py-3 cursor-pointer border-r" data-sort="name">
                        Name
                        <span class="ml-1">↕</span>
                      </th>
                      <th scope="col" class="px-4 py-3 cursor-pointer border-r" data-sort="year">
                        Graduation Year
                        <span class="ml-1">↕</span>
                      </th>
                      <th scope="col" class="px-4 py-3 cursor-pointer border-r" data-sort="degree">
                        Degree
                        <span class="ml-1">↕</span>
                      </th>
                      <th scope="col" class="px-4 py-3">
                        Title
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {sortedAlumni.map((alumni) => (
                      <tr class="bg-[var(--bg-undersurface-light)] dark:bg-[var(--bg-undersurface-dark)] border-b border-gray-200 dark:border-gray-700 hover:bg-[var(--bg-surface-hover)] dark:hover:bg-[var(--bg-surface-hover-dark)]">
                        <th scope="row" class="px-6 py-4 font-medium border-r">
                          {alumni.fullName}
                        </th>
                        <td class="px-6 py-4 border-r" role="cell">
                          {alumni.graduationYear}
                        </td>
                        <td class="px-6 py-4 border-r" role="cell">
                          {alumni.degree}
                        </td>
                        <td class="px-6 py-4" role="cell">
                          {alumni.title}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
</Layout>

<script>
  // Sorting functionality
  const getCellValue = (tr: HTMLElement, idx: number) => {
    const cell = tr.children[idx];
    return cell ? cell.textContent || '' : '';
  };
  
  const comparer = (idx: number, asc: boolean) => (a: HTMLElement, b: HTMLElement) => {
    const v1 = getCellValue(a, idx);
    const v2 = getCellValue(b, idx);
    return v1 !== '' && v2 !== '' && !isNaN(Number(v1)) && !isNaN(Number(v2))
      ? (asc ? 1 : -1) * (Number(v1) - Number(v2))
      : (asc ? 1 : -1) * v1.toString().localeCompare(v2);
  };
  
  document.querySelectorAll('th[data-sort]').forEach(th => {
    let asc = true;
    th.addEventListener('click', () => {
      const table = th.closest('table');
      const tbody = table?.querySelector('tbody');
      if (!tbody) return;
      
      const columnIndex = Array.from(th.parentElement?.children || []).indexOf(th);
      
      // Update sort indicators
      if (th.parentElement) {
        th.parentElement.querySelectorAll('th').forEach(header => {
          const span = header.querySelector('span');
          if (span) {
            span.textContent = '↕';
          }
        });
      }
      
      const span = th.querySelector('span');
      if (span) {
        span.textContent = asc ? '↑' : '↓';
      }
      
      const rows = Array.from(tbody.querySelectorAll('tr'));
      rows.sort(comparer(columnIndex, asc))
        .forEach(tr => tbody.appendChild(tr));
      
      asc = !asc;
    });
  });
</script>