---
import Layout from '../../layouts/MainLayout.astro';
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import PageTitle from "../../components/PageTitle.astro";
import SpeakerProfile from '../../components/RPCSSSpeakerProfile.astro';
import { getSpeakerSeriesData } from '../../lib/googleSheets';
import { YouTube } from '@astro-community/astro-embed-youtube';
import { Image } from 'astro:assets';

// Update the image import to include the default export
const cachedImages = import.meta.glob('/src/images/cached-profiles/*.jpg', { eager: true, import: 'default' });
const defaultProfileImage = await import('../../images/profile-images/robot-profile.jpg');

const title = "Robotics Pathways and Careers Speaker Series";
const subtitle = "Answering the question of 'What can I do with a robotics degree?'";
const description = "Inviting professionals working in robotics to come talk with current students about their potential career paths.";

const speakerData = await getSpeakerSeriesData();
const currentDate = new Date();

// Sort speakers by date
const sortedSpeakers = speakerData.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());

// Split into upcoming and past events
// Set today to end of day to include all of today's events as upcoming
const today = new Date();
today.setHours(23, 59, 59, 999);

const upcomingSpeakers = sortedSpeakers.filter(speaker => {
  const speakerDate = new Date(speaker.date);
  speakerDate.setHours(23, 59, 59, 999);
  return speakerDate >= today;
});
const pastSpeakers = sortedSpeakers.filter(speaker => {
  const speakerDate = new Date(speaker.date);
  speakerDate.setHours(23, 59, 59, 999);
  return speakerDate < today;
}).reverse();
---

<Layout title={`${title} | Michigan Robotics`} description={description}>
  <Breadcrumbs />
  <PageTitle title={title} />
  
  <article class="prose dark:prose-invert max-w-6xl w-11/12 mx-auto mt-4 mb-4 prose-headings:font-roboto prose-h2:text-3xl prose-h3:text-2xl prose-h4:text-xl prose-h5:text-lg prose-h6:text-base prose-headings:font-bold">
    <div class="mb-8 mt-8 relative">
      <h2 class="text-xl font-roboto text-gray-800 dark:text-gray-200 leading-relaxed not-prose italic tracking-wide">
        {subtitle}</h2>
      <div class="subtitle-double-line"></div>
    </div>



    <p>The Robotics Pathways and Careers Speaker Series (RPCSS) invites professionals working in robotics to come talk with current undergraduates about their career path, how a background in robotics has impacted their professional growth, and what they hope to see in students looking to enter the profession.</p>

    <p>The RPCSS is held every other Tuesday evening from 4:30-6:00pm on the campus of the University of Michigan in 2300 FMCRB.</p>

    <p>The 90-minute format of the event will consist of a 30-minute presentation from the invited speaker and up to 40 minutes of moderated Q&A and discussion. Students will be able to participate in person or remotely. Each seminar will be available <a href="https://umich.zoom.us/j/92286702864">via Zoom</a>.</p>

    <!-- Add search input -->
    <div class="mb-8">
      <input 
        type="text" 
        id="speakerSearch"
        placeholder="Search speakers, titles, abstracts..."
        class="search-bar"
      >
    </div>

    {upcomingSpeakers.length > 0 && (
      <>
        <h2>Upcoming speakers</h2>

        {upcomingSpeakers.map(speaker => (
          <SpeakerProfile
            image={cachedImages[speaker.imageUrl] || defaultProfileImage.default}
            imageAlt={speaker.name}
            title={speaker.title}
            subtitle={new Date(speaker.date).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}
            name={speaker.name}
            role={`${speaker.role}${speaker.organization ? `, ${speaker.organization}` : ''}`}
            website={speaker.website}
            isExpanded={true}
          >
            {speaker.abstract && (
              <>
                <h3>Abstract</h3>
                <p>{speaker.abstract}</p>
              </>
            )}

            {speaker.bio && (
              <>
                <h3>Bio</h3>
                <p>{speaker.bio}</p>
              </>
            )}
          </SpeakerProfile>
        ))}
      </>
    )}

    <h2>Past speakers</h2>

    {pastSpeakers.map(speaker => (
      <SpeakerProfile
        image={cachedImages[speaker.imageUrl] || defaultProfileImage.default}
        imageAlt={speaker.name}
        title={speaker.title}
        subtitle={new Date(speaker.date).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}
        name={speaker.name}
        role={`${speaker.role}${speaker.organization ? `, ${speaker.organization}` : ''}`}
        website={speaker.website}
        isExpanded={false}
      >

        {speaker.recordingUrl && (
          <>
            <h3>Recording</h3>
            <YouTube id={speaker.recordingUrl} />
          </>
        )}
        {speaker.abstract && (
          <>
            <h3>Abstract</h3>
            <p>{speaker.abstract}</p>
          </>
        )}

        {speaker.bio && (
          <>
            <h3>Bio</h3>
            <p>{speaker.bio}</p>
          </>
        )}

      </SpeakerProfile>
    ))}
  </article>
</Layout>

<script>
  const searchInput = document.getElementById('speakerSearch') as HTMLInputElement;
  const speakerProfiles = document.querySelectorAll('.speaker-profile');

  searchInput.addEventListener('input', (e) => {
    const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();

    speakerProfiles.forEach((profile) => {
      const searchableContent = profile.textContent?.toLowerCase() || '';
      if (searchableContent.includes(searchTerm)) {
        (profile as HTMLElement).style.display = 'block';
      } else {
        (profile as HTMLElement).style.display = 'none';
      }
    });
  });
</script>
